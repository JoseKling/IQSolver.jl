var documenterSearchIndex = {"docs":
[{"location":"#IQSolver.jl-Documentation","page":"IQSolver.jl Documentation","title":"IQSolver.jl Documentation","text":"","category":"section"},{"location":"","page":"IQSolver.jl Documentation","title":"IQSolver.jl Documentation","text":"","category":"page"},{"location":"#Introduction","page":"IQSolver.jl Documentation","title":"Introduction","text":"","category":"section"},{"location":"","page":"IQSolver.jl Documentation","title":"IQSolver.jl Documentation","text":"This is a simple package for solving the IQ Puzzler Pro game. It works for all three variantes of the game, including the 3D pyramid!.","category":"page"},{"location":"","page":"IQSolver.jl Documentation","title":"IQSolver.jl Documentation","text":"It uses a backtracking algorithm to solve the game, recursing on disconnected empty regions on the board. Although  it is really cool to see it solving the puzzle, the plotting is too slow, so only the initial and final states are shown.","category":"page"},{"location":"","page":"IQSolver.jl Documentation","title":"IQSolver.jl Documentation","text":"To see it in action, first install it.","category":"page"},{"location":"","page":"IQSolver.jl Documentation","title":"IQSolver.jl Documentation","text":"using Pkg\nPkg.add(\"https://github.com/JoseKling/IQSolver.jl.git\")\nusing IQSolver","category":"page"},{"location":"","page":"IQSolver.jl Documentation","title":"IQSolver.jl Documentation","text":"And then simply run this command to solve a specific stage.","category":"page"},{"location":"","page":"IQSolver.jl Documentation","title":"IQSolver.jl Documentation","text":"solve(80)","category":"page"},{"location":"#Basic-functions","page":"IQSolver.jl Documentation","title":"Basic functions","text":"","category":"section"},{"location":"","page":"IQSolver.jl Documentation","title":"IQSolver.jl Documentation","text":"solve\nimage","category":"page"},{"location":"#IQSolver.solve","page":"IQSolver.jl Documentation","title":"IQSolver.solve","text":"Can be called in three different ways:\n\nBoard + Pieces -> Use the collection of Pieces to solve the Board. Any\n\nPieces in the collection that are already on the Board will be disconsidered.\n\nBoard -> Solves the Board with the original game Pieces. Again, Pieces\n\nalready on the Board are discarded.\n\nNumber -> Solves the corresponding game's stage.\n\n\n\n\n\n","category":"function"},{"location":"#IQSolver.image","page":"IQSolver.jl Documentation","title":"IQSolver.image","text":"If a Board is passed, shows the board with empty Cells in black and Cells with pieces with the corresponding color.\n\nIf an Int n is passed, shows the configuration of the board in stage n of the original game.\n\nCan also be used to see a specific symmetry of a piece. Simply provide a Piece and an Int n to show the n-th symmetry of the Piece.\n\n\n\n\n\n","category":"function"},{"location":"#Original-game","page":"IQSolver.jl Documentation","title":"Original game","text":"","category":"section"},{"location":"","page":"IQSolver.jl Documentation","title":"IQSolver.jl Documentation","text":"rectangular_board\ndiagonal_board\npyramid_board\nbuild_stage\ngame_pieces2D\ngame_pieces3D","category":"page"},{"location":"#IQSolver.rectangular_board","page":"IQSolver.jl Documentation","title":"IQSolver.rectangular_board","text":"Creates an empty rectangular board\n\n\n\n\n\nCreates a rectangular board filled with the provided Pieces and Regions.\n\nfilled is a Dict of Piece => Region.\n\n\n\n\n\n","category":"function"},{"location":"#IQSolver.diagonal_board","page":"IQSolver.jl Documentation","title":"IQSolver.diagonal_board","text":"Creates an empty diagonal board (the one on the back of the game)\n\n\n\n\n\nBuilds the game's diagonal 2D board filled with the provided Pieces.\n\n\n\n\n\n","category":"function"},{"location":"#IQSolver.pyramid_board","page":"IQSolver.jl Documentation","title":"IQSolver.pyramid_board","text":"Creates a pyramid board\n\n\n\n\n\nBuilds the game's 3D pyramid board board filled with the provided Pieces.\n\n\n\n\n\n","category":"function"},{"location":"#IQSolver.build_stage","page":"IQSolver.jl Documentation","title":"IQSolver.build_stage","text":"Returns the board with the configuration of each stage in the game\n\n\n\n\n\n","category":"function"},{"location":"#IQSolver.game_pieces2D","page":"IQSolver.jl Documentation","title":"IQSolver.game_pieces2D","text":"List of all the pieces in the original game. This list is for the 2D variants.\n\nTheir names refer to the color. It always start with 'l', 'm', or 'd', for light, middle, and dark. To maintain the standard and to not have any conflicts with any color names, a 'm' is appended even for colors that appear only once, like 'm_orange'.\n\nThe individual pieces are also exported.\n\n\n\n\n\n","category":"constant"},{"location":"#IQSolver.game_pieces3D","page":"IQSolver.jl Documentation","title":"IQSolver.game_pieces3D","text":"List of all the pieces of the game, but for the 3D pyramid variant.\n\nThe difference between the 3D and 2D Pieces is the number of symmetries.\n\n\n\n\n\n","category":"constant"},{"location":"#Data-types","page":"IQSolver.jl Documentation","title":"Data types","text":"","category":"section"},{"location":"","page":"IQSolver.jl Documentation","title":"IQSolver.jl Documentation","text":"Piece\nBoard\nRegion","category":"page"},{"location":"#IQSolver.Piece","page":"IQSolver.jl Documentation","title":"IQSolver.Piece","text":"A Piece is the collection of all its symmetries with a correspoding color. A symmetry of a piece is just a Region (a collection of Cells), which will be always in a normal form. This means that a symmetry always contains the Cell (0 0) (or (000)) and the first index of all the Cells in it is always non-negative.\n\nThe implemented methods for this data type are:\n\nn_symmetries -> number of symmetries\nsize -> how many cells it occupies\niterate -> iterate over its symmetries\n\n\n\n\n\n","category":"type"},{"location":"#IQSolver.Board","page":"IQSolver.jl Documentation","title":"IQSolver.Board","text":"A Board is a matrix containing either a Color or nothing. Alias for Matrix{Union{Nothing, Color}}.\n\nImplemented methods for this dasta type:\n\nempty_region -> Returns the collection of empty Cells\nimage -> Plots the current state of the board\n\n\n\n\n\n","category":"type"},{"location":"#IQSolver.Region","page":"IQSolver.jl Documentation","title":"IQSolver.Region","text":"A region is a collection of Cells.\n\n\n\n\n\n","category":"type"},{"location":"#Index","page":"IQSolver.jl Documentation","title":"Index","text":"","category":"section"},{"location":"","page":"IQSolver.jl Documentation","title":"IQSolver.jl Documentation","text":"","category":"page"}]
}
